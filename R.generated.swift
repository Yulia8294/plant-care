//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `AddPlant`.
    static let addPlant = _R.storyboard.addPlant()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MyPlants`.
    static let myPlants = _R.storyboard.myPlants()
    /// Storyboard `MyTasks`.
    static let myTasks = _R.storyboard.myTasks()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddPlant", bundle: ...)`
    static func addPlant(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addPlant)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MyPlants", bundle: ...)`
    static func myPlants(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myPlants)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MyTasks", bundle: ...)`
    static func myTasks(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myTasks)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 14 images.
  struct image {
    /// Image `Add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add")
    /// Image `Articles`.
    static let articles = Rswift.ImageResource(bundle: R.hostingBundle, name: "Articles")
    /// Image `Camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera")
    /// Image `Explore`.
    static let explore = Rswift.ImageResource(bundle: R.hostingBundle, name: "Explore")
    /// Image `Image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image")
    /// Image `Profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile")
    /// Image `_Plant image`.
    static let _PlantImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "_Plant image")
    /// Image `bathroom`.
    static let bathroom = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom")
    /// Image `bedroom`.
    static let bedroom = Rswift.ImageResource(bundle: R.hostingBundle, name: "bedroom")
    /// Image `emptyState`.
    static let emptyState = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyState")
    /// Image `kitchen`.
    static let kitchen = Rswift.ImageResource(bundle: R.hostingBundle, name: "kitchen")
    /// Image `livingroom`.
    static let livingroom = Rswift.ImageResource(bundle: R.hostingBundle, name: "livingroom")
    /// Image `office`.
    static let office = Rswift.ImageResource(bundle: R.hostingBundle, name: "office")
    /// Image `terrace`.
    static let terrace = Rswift.ImageResource(bundle: R.hostingBundle, name: "terrace")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Articles", bundle: ..., traitCollection: ...)`
    static func articles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.articles, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Explore", bundle: ..., traitCollection: ...)`
    static func explore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "_Plant image", bundle: ..., traitCollection: ...)`
    static func _PlantImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._PlantImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom", bundle: ..., traitCollection: ...)`
    static func bathroom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bedroom", bundle: ..., traitCollection: ...)`
    static func bedroom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bedroom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emptyState", bundle: ..., traitCollection: ...)`
    static func emptyState(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyState, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kitchen", bundle: ..., traitCollection: ...)`
    static func kitchen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kitchen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "livingroom", bundle: ..., traitCollection: ...)`
    static func livingroom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.livingroom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office", bundle: ..., traitCollection: ...)`
    static func office(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "terrace", bundle: ..., traitCollection: ...)`
    static func terrace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.terrace, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `PickRoomCell`.
    static let pickRoomCell = _R.nib._PickRoomCell()
    /// Nib `PlantCell`.
    static let plantCell = _R.nib._PlantCell()
    /// Nib `PlantInfoView`.
    static let plantInfoView = _R.nib._PlantInfoView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PickRoomCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pickRoomCell) instead")
    static func pickRoomCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickRoomCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlantCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plantCell) instead")
    static func plantCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plantCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlantInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plantInfoView) instead")
    static func plantInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plantInfoView)
    }
    #endif

    static func pickRoomCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PickRoomCell? {
      return R.nib.pickRoomCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PickRoomCell
    }

    static func plantCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlantCell? {
      return R.nib.plantCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlantCell
    }

    static func plantInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.plantInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PickRoomCell.validate()
      try _PlantCell.validate()
      try _PlantInfoView.validate()
    }

    struct _PickRoomCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PickRoomCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PickRoomCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PickRoomCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "kitchen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kitchen' is used in nib 'PickRoomCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlantCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlantCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlantCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlantCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "_Plant image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '_Plant image' is used in nib 'PlantCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlantInfoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlantInfoView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Image' is used in nib 'PlantInfoView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try addPlant.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try myPlants.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try myTasks.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct addPlant: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PickRoomController

      let addPlantPictureController = StoryboardViewControllerResource<AddPlantPictureController>(identifier: "AddPlantPictureController")
      let bundle = R.hostingBundle
      let name = "AddPlant"
      let pickRoomController = StoryboardViewControllerResource<PickRoomController>(identifier: "PickRoomController")

      func addPlantPictureController(_: Void = ()) -> AddPlantPictureController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPlantPictureController)
      }

      func pickRoomController(_: Void = ()) -> PickRoomController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pickRoomController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Image' is used in storyboard 'AddPlant', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addPlant().addPlantPictureController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPlantPictureController' could not be loaded from storyboard 'AddPlant' as 'AddPlantPictureController'.") }
        if _R.storyboard.addPlant().pickRoomController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pickRoomController' could not be loaded from storyboard 'AddPlant' as 'PickRoomController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct myPlants: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let myPlantsController = StoryboardViewControllerResource<MyPlantsController>(identifier: "MyPlantsController")
      let name = "MyPlants"

      func myPlantsController(_: Void = ()) -> MyPlantsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPlantsController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Add' is used in storyboard 'MyPlants', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Explore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Explore' is used in storyboard 'MyPlants', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.myPlants().myPlantsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPlantsController' could not be loaded from storyboard 'MyPlants' as 'MyPlantsController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct myTasks: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyTasksController

      let bundle = R.hostingBundle
      let myTasksController = StoryboardViewControllerResource<MyTasksController>(identifier: "MyTasksController")
      let name = "MyTasks"

      func myTasksController(_: Void = ()) -> MyTasksController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myTasksController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.myTasks().myTasksController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myTasksController' could not be loaded from storyboard 'MyTasks' as 'MyTasksController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
